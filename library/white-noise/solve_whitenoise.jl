using QuadGK
using Optim

########################################################
## BINARY MODEL
########################################################

"""
    Solution to the Fokker-Planck equation for x(t).
"""
function solve_binary_whitenoise(p,epars)

    # Cell parameters
    q,œâ = p
    a,b = œâ * (1 - q), œâ * q

    # Environment parameters
    Œº‚ÇÅ,Œº‚ÇÇ,œÉ‚ÇÅ,œÉ‚ÇÇ,œÅ = epars

    # Unnormalised PDF
    Œ± = x -> -2 * ((a - b + Œº‚ÇÅ - Œº‚ÇÇ - œÅ * œÉ‚ÇÅ * œÉ‚ÇÇ + œÉ‚ÇÇ^2) * log(x) + 
             (b - a - Œº‚ÇÅ + Œº‚ÇÇ - œÅ * œÉ‚ÇÅ * œÉ‚ÇÇ + œÉ‚ÇÅ^2) * log(1 - x) + 
              b / x - a / (x - 1)) / 
              (œÉ‚ÇÅ^2 - 2œÅ*œÉ‚ÇÅ*œÉ‚ÇÇ+œÉ‚ÇÇ^2)
    g = x -> exp(Œ±(x))

    # Normalising factor
    C = quadgk(g,eps(),1.0 - eps())[1]

    # Normalised PDF
    x -> 0 < x < 1.0 ? g(x) / C : 0.0

end


function solve_binary_whitenoise_fitness(p,epars)

    # Cell parameters
    q,œâ = p
    a,b = œâ * (1 - q), œâ * q

    # Environment parameters
    Œº‚ÇÅ,Œº‚ÇÇ,œÉ‚ÇÅ,œÉ‚ÇÇ,œÅ = epars

    # Get distribution of x
    f = solve_binary_whitenoise(p,epars)

    # Fitness as a function of x
    fitness = x -> Œº‚ÇÇ - 0.5 * (1 - x) * (-2Œº‚ÇÅ + 2Œº‚ÇÇ + (1 - x) * œÉ‚ÇÅ^2) - œÅ * x * (1 - x) * œÉ‚ÇÅ * œÉ‚ÇÇ - 0.5 * x^2 * œÉ‚ÇÇ^2

    # Integrate
    quadgk(x -> f(x) * fitness(x),eps(),1 - eps())[1]

end

function solve_binary_whitenoise_optimalq(œâ,epars)
    
    # Function to maximise
    fitness = q -> -solve_binary_whitenoise_fitness([q,œâ],epars)

    # Optimize
    res = optimize(fitness,0.0,1.0)

    # Return
    (res.minimizer,-res.minimum)

end

"""
    In the œâ ‚Üí ‚àû limit
"""
function solve_binary_whitenoise_optimalq(epars)

    # Environment parameters
    Œº‚ÇÅ,Œº‚ÇÇ,œÉ‚ÇÅ,œÉ‚ÇÇ,œÅ = epars

    # Optimum (unbounded)
    q = 1 - (1 - Œº‚ÇÇ - œÅ * œÉ‚ÇÅ * œÉ‚ÇÇ + œÉ‚ÇÇ^2) / (œÉ‚ÇÅ^2 - 2 * œÅ * œÉ‚ÇÅ * œÉ‚ÇÇ + œÉ‚ÇÇ^2)

    # Optimum (bounded)
    return max(min(q,1.0),0.0)

end
function solve_binary_whitenoise_optimalq(m::Function,œÉ::Function,œÅ::Function;Œµ=[1.0,0.0])
    # Environmental parameters
    epars = [m.(Œµ); œÉ.(Œµ); œÅ(Œµ[2] - Œµ[1])]
    solve_binary_whitenoise_optimalq(epars)
end


########################################################
## CONTINUOUS MODEL (SINGLE MODE)
########################################################

"""
    Solve continuous white noise model using numerical integration.
"""
function solve_continuous_whitenoise_fitness(p::Distribution,m::Function,œÉ·µ¢::Function;q=1e-6)

    ùîºœÉ·µ¢ = ùîº(œÉ·µ¢,p;q)

    ùîº(m,p;q) - sum(ùîºœÉ·µ¢.^2) / 2

end
function solve_continuous_whitenoise_fitness(p::Distribution,œÉ·µ¢::Function;q=1e-6)
    m = Œµ -> Œµ
    solve_continuous_whitenoise_fitness(p,m,œÉ·µ¢;q)
end
function solve_whitenoise_fitness(q,m,œÉ·µ¢;quant=1e-6)
    p = construct_binary_distribution([0.0,0.0],q)
    solve_continuous_whitenoise_fitness(p,m,œÉ·µ¢;q=quant)
end


"""
    Get each component (as a function of phenotype) for a two-source whitenoise model.
"""
function get_each_whitenoise_œÉ(œÉ,œÅ,ŒµÃÇ::Number)
    œÉ‚ÇÅ = Œµ -> œÉ(Œµ) * œÅ(Œµ - ŒµÃÇ)
    œÉ‚ÇÇ = Œµ -> œÉ(Œµ) * sqrt(1 - œÅ(Œµ - ŒµÃÇ)^2)
    Œµ -> [œÉ‚ÇÅ(Œµ),œÉ‚ÇÇ(Œµ)]
end
get_each_whitenoise_œÉ(œÉ,œÅ,p::Vector,ŒµÃÇ::Number=solve_whitenoise_quadratic_optimum(p)) = 
    get_each_whitenoise_œÉ(Œµ -> œÉ(Œµ,p),Œî -> œÅ(Œî,p),ŒµÃÇ)

"""
    Get optimal single phenotype if variance function is quadratic in form.
"""
function solve_whitenoise_quadratic_optimum(p)
    max(min(1 / 2 + 1 / p[2] * (1 / p[1]^2 - 1 / 2),1.0),0.0)
end